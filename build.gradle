buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:4.+'
    }
}

plugins {
    id 'org.spongepowered.plugin' version '0.9.0'
    id "io.freefair.lombok" version "5.3.0"
}

apply plugin: 'net.minecraftforge.gradle'

group = ''
version = ''

minecraft {
    mappings channel: 'snapshot', version: '20180808-1.12'

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }

        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

dependencies {
    // Forge
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'

    // Sponge
    compileOnly 'org.spongepowered:spongeapi:7.4.0'
    annotationProcessor 'org.spongepowered:spongeapi:7.4.0'

    // Pixelmon
    compileOnly files("/libs/Pixelmon-1.12.2-8.3.8-server.jar")
    compileOnly ('org.spongepowered:spongecommon:1.12.2-7.3.0:dev') {
        exclude group: 'org.spongepowered', module: 'testplugins'
    }
}

jar {
    manifest {
        attributes(
                'Main-Class': 'br.com.pixelmonbrasil.hotsnowball.HotSnowball'
        )
    }
}

sponge.plugin.id = 'snowball'

    def targetJavaVersion = 8
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

tasks.withType(JavaCompile) {
    jar.archiveFileName = "${jar.baseName}.jar"
    options.encoding = "UTF-8"
}